
---

### **Temario General**

1. **Paridad**  
   Cálculo y verificación de bit de paridad (paridad simple) para detección de errores en datos binarios.
   
2. **Código Hamming**  
   Generación, verificación y corrección de errores usando el código Hamming (7,4).
   
3. **Algoritmo de Luhn**  
   Validación de números mediante el algoritmo de Luhn (aplicaciones como tarjetas de crédito).
   
4. **Módulo 11**  
   Cálculo y validación de dígitos verificadores basados en el Módulo 11, aplicable a identificadores oficiales.
   
5. **Hashing de Contraseñas (SHA-256)**  
   Hashing de contraseñas utilizando SHA-256, con comparación y verificación de hashes.
   
6. **Tabla Hash (Resolución por Desplazamiento Lineal)**  
   Implementación de tablas hash con resolución de colisiones mediante desplazamiento lineal.
   
7. **Tabla Hash (Encadenamiento con Buckets)**  
   Implementación de tablas hash con resolución de colisiones utilizando buckets y encadenamiento.
   
8. **Punteros a Función y Jump Tables**  
   Uso de punteros a función para crear tablas de despacho y tablas de salto, optimizando el control de flujo y la modularidad en el código.

---

### **Temario Detallado**

#### **Temario: Punteros a Función y Jump Tables**
1. **Introducción a Punteros a Función**
   - Concepto de puntero a función.
   - Declaración y uso básico.
   - Asignación de una función a un puntero.
   - Invocación de una función a través de su puntero.
   
2. **Uso de Punteros a Función**
   - Modularidad y flexibilidad en el manejo de funciones.
   - Ejemplo práctico de implementación de funciones básicas como suma y resta.
   - Llamadas dinámicas mediante un puntero a función.
   
3. **Funciones como Parámetros (Callbacks)**
   - Definición y aplicación de callbacks.
   - Ejemplo de ordenamiento con algoritmos personalizados usando callbacks.
   
4. **Tabla de Despacho (Dispatch Table)**
   - Arreglo de punteros a funciones para selección dinámica de funciones.
   - Ejemplo práctico de operaciones matemáticas (suma, resta, multiplicación) usando una tabla de despacho.
   
5. **Tabla de Salto (Jump Table)**
   - Uso de tablas de salto para el control de flujo sin parámetros ni valores de retorno.
   - Aplicaciones típicas en máquinas de estado.
   - Ejemplo práctico de ejecución de funciones mediante una tabla de salto.
   
6. **Comparación: Tabla de Despacho vs Tabla de Salto**
   - Diferencias y aplicaciones de las tablas de despacho y salto según las necesidades del programa.
   
7. **Aplicaciones Prácticas de Punteros a Función**
   - Implementación de menús dinámicos y máquinas de estado utilizando punteros a función.
   - Algoritmos personalizables usando callbacks.

---

#### **Temario: Algoritmos Avanzados y Aplicaciones en C**
1. **Algoritmos Greedy y Problemas de Optimización**
   - Resolución del problema del cambio óptimo usando un enfoque greedy.
   
2. **Mochila Fraccionaria (Problema Knapsack Fraccional)**
   - Introducción al problema y su resolución utilizando un enfoque greedy.
   - Implementación en C con estructuras y algoritmos de ordenamiento.

3. **Regresión Lineal Simple**
   - Implementación matemática y análisis de regresión lineal simple en C para la predicción de valores.

---

#### **Temario: Estructuras de Datos y Manejo de Errores en C**
1. **Listas Enlazadas Simples**
   - Introducción a listas enlazadas, operaciones básicas como agregar, eliminar y modificar elementos.
   - Implementación en C utilizando punteros y estructuras.

2. **Listas Dobles Enlazadas**
   - Comparación con listas simples, operaciones de inserción y eliminación con punteros `anterior` y `siguiente`.

3. **Aplicaciones Avanzadas: Gestión de Pasajeros**
   - Implementación de listas dobles enlazadas para gestionar pasajeros, permitiendo navegación bidireccional.

4. **Manejo de Errores de Entrada**
   - Validación de entrada y manejo de errores en C utilizando `scanf` y códigos de salida.

5. **Comparación de Listas Simples vs. Dobles**
   - Análisis de ventajas y desventajas, incluyendo operaciones de inserción, eliminación y flexibilidad.

---

### **Códigos Analizados y sus Temas**

1. **Cálculo de Bit de Paridad (Paridad Simple)**  
   Implementación de un bit de paridad para la detección de errores en datos binarios.

2. **Código Hamming (7,4)**  
   Generación y corrección de errores con el código Hamming.

3. **Algoritmo de Luhn**  
   Verificación de validez de números mediante el algoritmo de Luhn.

4. **Módulo 11 para Cálculo de Dígito Verificador**  
   Cálculo de dígitos verificadores utilizando el Módulo 11, usado en identificadores como CUIT o CUIL.

5. **Hashing de Contraseñas con SHA-256**  
   Implementación del hashing de contraseñas con SHA-256 y comparación de hashes.

6. **Tabla Hash con Resolución de Colisiones (Dirección Abierta)**  
   Implementación de una tabla hash con resolución de colisiones mediante desplazamiento lineal.

7. **Tabla Hash con Manejo de Colisiones por Encadenamiento**  
   Implementación de tablas hash con manejo de colisiones mediante encadenamiento con buckets.

---
