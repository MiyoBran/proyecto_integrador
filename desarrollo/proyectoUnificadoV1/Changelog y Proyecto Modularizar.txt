////////**********////////////
si hacemos un struct - enum - typedef ---> en el correspondiente archivo.h asi todos lo tienen 
(verificar que nadie mas haga uno parecido para lo mismo)

toda funcion que hagamos en nuestro archivo.c , debemos "declararla" en el archivo.h , para que los demas puedan acceder si necesitan


gamelogic.c y gamelogic.h se usan para structs y funciones que calculan manu y benja
graphics_storage se usan para funciones exclusivamente graficas
en main manejamos el loop principal, y llamamos a las funciones cuando sea necesario





-----------------------------------------------------------------------------------------------
Miyo@MiyoPC ~/git-Materia/proyectoUnificado
$ ls
'Blackjack cards'                        files.c    gamelogic.c          main.c
'Changelog y Proyecto Modularizar.txt'   files.h    gamelogic.h
 README.txt                              files2.c   graphics_storage.c
 cygglfw-3.dll                           files2.h   graphics_storage.h

Miyo@MiyoPC ~/git-Materia/proyectoUnificado
$


--------------------Proyecto modularizado MIYO
TAMAÑO PANTALLA 1280 * 720
Horas Programacio
*3hs iniciales
*8hs con parte grafica Domingo
*7hs nueva estructura archivos, memoria dinamica y lograr compilar todo junto

Evolucion Archivos Files
-main.c archivo_configuracion.c archivo_configuracion.h
-sinjuego.c archivo_configuracion.c archivo_configuracion.h
---Carpeta nueva
-files.c files.h // tiene todo andando, agregado borrar archivo
-files2.c files2.h // con memoria dinamica , revision de liberar memoria.
---> Proximo, 
scoreboard_v1.c y scoreboard_v2.c. Esto ayudará a clarificar su propósito.
Si contienen funciones similares pero con diferentes implementaciones, podría 
ser útil crear un archivo de cabecera (scoreboard.h) que contenga las definiciones 
de las funciones que ambos archivos implementan. Esto permite que otros módulos 
incluyan esta cabecera para acceder a las funciones del scoreboard, independientemente 
de la implementación que elijas.





Reglas:
https://www.casino.es/blackjack/reglas-blackjack-europeo/

blackjack/
├── include/
│   ├── carta.h
│   ├── jugador.h
│   ├── juego.h
│   └── ui.h
├── src/
│   ├── carta.c
│   ├── jugador.c
│   ├── juego.c
│   └── ui.c
	
└── main.c

Estructura Propuesta para un Proyecto de Blackjack en C
1. Archivo principal (main.c):

Propósito: Punto de entrada del programa.
Contenido: Inicialización, bucle principal del juego, llamada a funciones de otros módulos.
Nombre sugerido: main.c
2. Módulo de cartas:

Propósito: Manejo de las cartas (crear mazo, barajar, repartir, etc.).
Archivos:
carta.h: Declaración de la estructura Carta, funciones para crear, comparar cartas, etc.
carta.c: Implementación de las funciones declaradas en carta.h.
Nombres sugeridos: carta.h y carta.c
3. Módulo de jugador:

Propósito: Representación de los jugadores (mano, puntaje, acciones).
Archivos:
jugador.h: Declaración de la estructura Jugador, funciones para agregar cartas, calcular puntaje, etc.
jugador.c: Implementación de las funciones declaradas en jugador.h.
Nombres sugeridos: jugador.h y jugador.c
4. Módulo de juego:

Propósito: Lógica principal del juego (repartir cartas iniciales, turnos, condiciones de victoria, etc.).
Archivos:
juego.h: Prototipos de funciones relacionadas con el juego (iniciar juego, jugar ronda, etc.).
juego.c: Implementación de las funciones declaradas en juego.h.
Nombres sugeridos: juego.h y juego.c
5. Módulo de interfaz de usuario:

Propósito: Interacción con el usuario (mostrar mensajes, pedir entradas).
Archivos:
ui.h: Prototipos de funciones para mostrar el estado del juego, pedir acciones al jugador, etc.
ui.c: Implementación de las funciones declaradas en ui.h.
Nombres sugeridos: ui.h y ui.c
6. Módulo de configuración (opcional):

Propósito: Almacenar constantes, configuraciones personalizables del juego.
Archivos:
config.h: Definición de constantes (número de barajas, valor de las cartas, etc.).
Nombre sugerido: config.h







Cambios:
--------------------------------------
main.c
*** cambiar nombre de archivo del fondo de la mesa / linea 44

** fijarse como funciona amount card de la linea 79

**Lineas 55 a60 posicion del texto 

linea 37 a 39 las tiene que asignar el juego, con una struct llamada gasmespecific por ahora


linea29 y 30
    playerDeck cartas1[] = { {DIAMANTE, 9}, {PICA, K}, {TREBOL, CINCO} };  //Struct just to test cards
    croupierDeck cartas1[] = { {DIAMANTE, 9}, {PICA, K}, {TREBOL, CINCO} };  //Struct just to test cards

--------------------------------------
graphics_storage.c  //// considerar cambio de nombre a config.c /// Archivo de implementación (generalmente con extensión .c):

linea 7 -> #include <string.h>
linea 9 -> #define MAX_LINEA 256

linea 16 -> agrego funcion obtener configuracion del archivo .env char* obtenerValorConfiguracion(const char *clave) {



-------------------------------------
graphics_storage.h //// considerar cambio de nombre a proyecto.h o blackjack.h /// Archivo de cabecera (generalmente con extensión .h):

linea 26 modifico}   playerDeck;

linea 28 - agrego struct croupierDeck

linea 47 y 48 -   
	int amountCardsPlayer; // ********** cantidad cartas del jugador
    int amountCardsCroupier; // ********** cantidad cartas del croupier 














